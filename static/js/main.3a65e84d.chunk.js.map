{"version":3,"sources":["components/Cell.js","components/Board.js","components/Game.js","serviceWorker.js","index.js"],"names":["Cell","props","className","value","onClick","Board","i","this","cells","Fragment","renderCell","Component","Game","state","xIsNext","stepNumber","history","Array","fill","step","setState","slice","length","calculateWinner","concat","status","current","winner","moves","map","move","desc","key","jumpTo","nextPlayer","announceWinner","handleClick","lines","a","b","c","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a65e84d.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Cell(props) {\n    return (\n        <button className={`cell cell-${props.value}`} onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n","import React, { Component } from 'react';\nimport Cell from './Cell';\n\nexport default class Board extends Component {\n    renderCell(i){\n        return <Cell value={this.props.cells[i]} \n        onClick={()=>this.props.onClick(i)} />\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"grid-row row-1\"></div>\n                <div className=\"grid-row row-2\"></div>\n                <div className=\"grid-column column-1\"></div>\n                <div className=\"grid-column column-2\"></div>\n                <div className=\"cells-row\">\n                    {this.renderCell(0)}\n                    {this.renderCell(1)}\n                    {this.renderCell(2)}\n                </div>\n                <div className=\"cells-row\">\n                    {this.renderCell(3)}\n                    {this.renderCell(4)}\n                    {this.renderCell(5)}\n                </div>\n                <div className=\"cells-row\">\n                    {this.renderCell(6)}\n                    {this.renderCell(7)}\n                    {this.renderCell(8)}\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react'\nimport Board from './Board';\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            xIsNext : true,\n            stepNumber : 0,\n            history:[\n                {cells: Array(9).fill(null)}\n            ]\n        }\n    }\n\n    jumpTo(step){\n        this.setState({\n            stepNumber: step,\n            xIsNext : step % 2 === 0\n        })\n    }\n    \n    handleClick(i){\n        const history = this.state.history.slice(0, this.state.stepNumber + 1)\n        const current = history[history.length-1];\n        const cells = current.cells.slice();\n        const winner = calculateWinner(cells);\n        if(winner || cells[i]){\n            return \n        }\n\n        cells[i] = this.state.xIsNext? 'x':'0';\n\n        this.setState({\n            history: history.concat({\n                cells: cells\n            }),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length\n        })\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.cells);\n        const moves = history.map((step, move) => {\n            const desc = move ? 'Go to #' + move : 'Start the Game';\n\n            return (\n                <li key={move}>\n                    <button onClick = {()=> this.jumpTo(move)} >\n                        {desc}\n                    </button>\n                </li>\n            );\n        });\n\n        let status,\n            nextPlayer = this.state.xIsNext ? 'X' : 0;\n        \n        let announceWinner = function (winner){\n            status = 'Winer is ' + winner;\n        }\n        \n        if(winner){\n            announceWinner(winner)\n        }else{\n            status = 'Next Player is ' + nextPlayer;\n        }\n\n        return (\n            <div className={`game turn-${nextPlayer}`}>\n                <div className=\"game-board\">\n                    <Board onClick={(i) => this.handleClick(i)}\n                        cells={current.cells} />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        )\n    }\n}\nfunction calculateWinner(cells) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (cells[a] && cells[a] === cells[b] && cells[b] === cells[c]) {\n            return cells[a];\n        }\n    }\n\n    return null;\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Game from './components/Game'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}