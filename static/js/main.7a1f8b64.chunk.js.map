{"version":3,"sources":["components/Cell.js","components/Board.js","components/Game.js","serviceWorker.js","index.js"],"names":["Cell","props","className","value","onClick","Board","i","this","cells","Fragment","renderCell","Component","calculateWinner","lines","length","a","b","c","Game","state","xIsNext","stepNumber","history","Array","fill","game_grid","step","setState","arr","slice","availableIndexes","from","keys","filter","index","selectedIndex","Math","floor","random","console","log","handleClick","concat","reduce","rows","key","push","moveAI","status","current","winner","nextPlayer","map","move","desc","jumpTo","announceWinner","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a1f8b64.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Cell(props) {\n    return (\n        <button className={`cell cell-${props.value}`} onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n","import React, { Component } from 'react';\nimport Cell from './Cell';\n\nexport default class Board extends Component {\n    renderCell(i){\n        return <Cell value={this.props.cells[i]} \n        onClick={()=>this.props.onClick(i)} />\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"grid-row row-1\"></div>\n                <div className=\"grid-row row-2\"></div>\n                <div className=\"grid-column column-1\"></div>\n                <div className=\"grid-column column-2\"></div>\n                <div className=\"cells-row\">\n                    {this.renderCell(0)}\n                    {this.renderCell(1)}\n                    {this.renderCell(2)}\n                </div>\n                <div className=\"cells-row\">\n                    {this.renderCell(3)}\n                    {this.renderCell(4)}\n                    {this.renderCell(5)}\n                </div>\n                <div className=\"cells-row\">\n                    {this.renderCell(6)}\n                    {this.renderCell(7)}\n                    {this.renderCell(8)}\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react'\nimport Board from './Board';\n\n\nfunction calculateWinner(cells) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (cells[a] && cells[a] === cells[b] && cells[b] === cells[c]) {\n            return cells[a];\n        }\n    }\n\n    return null;\n}\n\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            xIsNext : true,\n            stepNumber : 0,\n            history:[\n                {cells: Array(9).fill(null)}\n            ],\n            game_grid:[ // might need this later on for min-max algorithm\n            ]\n        }\n    }\n\n    componentDidMount(){\n        \n    }\n\n    jumpTo(step){\n        this.setState({\n            stepNumber: step,\n            xIsNext : step % 2 === 0\n        })\n    }\n\n    moveAI() {\n        let arr = this.state.history[this.state.history.length-1].cells.slice(),\n            indexes = Array.from(Array(arr.length).keys()),\n            availableIndexes = indexes.filter((index) => arr[index] == null),\n            selectedIndex = availableIndexes[Math.floor(Math.random()* availableIndexes.length)];\n\n        console.log(availableIndexes);\n        console.log(selectedIndex);\n        console.log(this.state.game_grid);\n        \n        this.handleClick(selectedIndex)\n    }\n    \n    handleClick(i){\n        const history = this.state.history.slice(0, this.state.stepNumber + 1)\n        const current = history[history.length-1];\n        const cells = current.cells.slice();\n        const winner = calculateWinner(cells);\n        if(winner || cells[i]){\n            return \n        }\n\n        cells[i] = this.state.xIsNext? 'x':'0';\n\n        this.setState({\n            history: history.concat({\n                cells: cells\n            }),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length,\n            game_grid: cells.reduce(function (rows, key, index) { \n                        return (index % 3 == 0 ? rows.push([key]) \n                        : rows[rows.length-1].push(key)) && rows;\n                    }, [])\n        });\n        // UX Improvement (to be done later) Prevent Clicks on Game Board till MoveAI() is finished\n        // (mostly to be done using pointer-events instead of [disabled] attribute on buttons)\n    }\n\n    componentDidUpdate(){\n        // Once component updates, call moveAI() which will add a radom 0 number to the Game Board. \n        if(!this.state.xIsNext){\n            this.moveAI()\n        }\n        // UX Improvement (to be done later - Enable clicking \n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.cells);\n        const moves = history.map((step, move) => {\n            console.log(move)\n            const desc = move ? 'Go to #' + move : 'Start the Game';\n\n            return (\n                <li key={move}>\n                    <button onClick = {()=> this.jumpTo(move)} >\n                        {desc}\n                    </button>\n                </li>\n            );\n        });\n\n        let status,\n            nextPlayer = this.state.xIsNext ? 'X' : 0;\n        \n        let announceWinner = function (winner){\n            status = 'Winer is ' + winner;\n        }\n        \n        if(winner){\n            announceWinner(winner)\n        }else{\n            status = 'Next Player is ' + nextPlayer;\n        }\n\n        return (\n            <div className={`game turn-${nextPlayer} ${winner ? 'winner-is-'+winner : winner}`}>\n                <div className=\"game-board\">\n                    <Board onClick={(i) => this.handleClick(i)}\n                        cells={current.cells} />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    {/* This is for test purpose only */}\n                    {/* <ol>{moves}</ol> */}\n                    <button className={`restart-game ${winner ? 'd-inline-block' : 'd-none'}`  }\n                    onClick={(i) => this.jumpTo(0)}>Restart</button>\n                </div>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Game from './components/Game'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}